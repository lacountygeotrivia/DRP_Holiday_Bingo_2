const SQUARE_NAMES = [
  'Open floorplan',
  'Take down a wall',
  'Curb appeal',
  'Crown molding',
  'Farmhouse sink',
  'Farmhouse chandelier',
  'Rustic charm',
  'Add island to kitchen',
  'Chip breaks something',
  'Basket of crayons',
  'Something is an "easy fix"',
  'Load-bearing wall',
  'Double vanity',
  'Natural light',
  'Shiplap',
  'Backsplash',
  'Recessed lighting',
  'Buyers get house for under list',
  'Inspirational sign',
  'Babies',
  'Breakfast nook',
  'Built-ins',
  'Giant clock',
  "Talk about Chip's glory days",
  'Unexpected expense',
  'Clint builds something',
  'Visit to the Farmhouse',
  'White cabinets'
];

class Bingo extends React.Component {
  constructor(props) {
    super();
    this.state = {
      squares: this.getSquares(),
    }
  }

  getSquares() {
    if (window.localStorage) {
      var savedGame = JSON.parse(window.localStorage.getItem('fixerUpperBingo'));
      if (savedGame)
        return savedGame;
      else {
        var squares = this.newSquares();
        window.localStorage.setItem('fixerUpperBingo', JSON.stringify(squares));
        return squares;
      }
    } else {
      return this.newSquares();
    }
  }

  newSquares() {
    var sq = [];
    var text = shuffle(SQUARE_NAMES);
    for (var i = 0; i < 25; i++) {
      sq.push({ stamped: false, text: text[i], win: false });
    }
    sq[12].text = 'Free Space';
    sq[12].stamped = true;
    return sq;
  }

  handleClick(i) {
    var squares = this.state.squares;
    squares[i].stamped = !squares[i].stamped;
    squares.forEach(function(square) {
      square.win = false;
    });

    const winLines = hasBingo(this.state.squares);
    if (winLines.length > 0) {

      winLines.forEach(function(line) {
        line.forEach(function(j) {
          squares[j].win = true;
        });
      });
    }

    this.setState({ squares });

    if (window.localStorage) {
      window.localStorage.setItem('fixerUpperBingo', JSON.stringify(squares));
    }
  }

  newGame() {
    var squares = this.newSquares();
    if (window.localStorage) {
      window.localStorage.setItem('fixerUpperBingo', JSON.stringify(squares))
    }
    this.setState({ squares });
  }

  render() {
    return(
      <div className="card clearfix">
        <h1 className="board-heading">Fixer Upper Bingo</h1>
        <div className="col-letters">
          <span>B</span>
          <span>I</span>
          <span>N</span>
          <span>G</span>
          <span>O</span>
        </div>
        <Board
          squares={this.state.squares}
          onClick={(i) => this.handleClick(i)}
        />
        <button className="new-game" onClick={() => this.newGame()}>
          New Card
        </button>
      </div>
    )
  }
}

class Square extends React.Component {
  constructor() {
    super();
    this.state = {
      value: null,
    };
  }

  render() {
    return(
      <button
        className={
          'square' + ' ' +
          (this.props.value.stamped ? 'stamped' : '') + ' ' +
          (this.props.value.win ? 'win' : '')
        }
        onClick={this.props.onClick}
      >
        {this.props.value.text}
      </button>
    );
  }
}

class Board extends React.Component {
  renderSquare(i) {
    return(
      <Square
        value={this.props.squares[i]}
        onClick={() => this.props.onClick(i)}
      />
    );
  }

  render() {
    let board = [];
    for (let i = 0; i < 5; i++) {
      let row = [];
      for (let j = 0; j < 5; j++) {
        row.push(this.renderSquare(j + i * 5));
      }
      board.push(<div key={i} className="board-row">{row}</div>);
    }

    return(
      <div className="board">{board}</div>
    );
  }
}

ReactDOM.render(<Bingo />, document.getElementById('app'));

// Helpers
function shuffle(arr) {
  return arr.sort(() => 0.5 - Math.random());
}

function hasBingo(squares) {
  const lines = [
    [0, 1, 2, 3, 4],
    [5, 6, 7, 8, 9],
    [10, 11, 12, 13, 14],
    [15, 16, 17, 18, 19],
    [20, 21, 22, 23, 24],
    [0, 5, 10, 15, 20],
    [1, 6, 11, 16, 21],
    [2, 7, 12, 17, 22],
    [3, 8, 13, 18, 23],
    [4, 9, 14, 19, 24],
    [0, 6, 12, 18, 24],
    [4, 8, 12, 16, 20]
  ];

  return lines.filter(function(line) {
    if (line.every(function(l) { return squares[l].stamped; })) {
      return line;
    }
  });
}
